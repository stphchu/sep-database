Create a database for the model we built in the example. Create a SQL file that
creates the tables and inserts sample data (the questions below will help you
create the data). Submit queries to find the following information and include
the results:

CREATE TABLE rooms (
      id integer,
      floor integer,
      room_number integer,
      price numeric(5, 2)
);

CREATE TABLE guests (
      id integer,
      last_name text,
      first_name text,
      phone_number text,
      email text,
      address text
);

CREATE TABLE bookings (
      id integer,
      check_in date,
      check_out date,
      room_id integer,
      guest_id integer
);

INSERT INTO rooms (id, floor, room_number, price)
	VALUES
  	(1, 1, 101, 99.99),
  	(2, 1, 102, 99.99),
  	(3, 2, 202, 99.99),
  	(4, 2, 203, 99.99),
  	(5, 3, 303, 99.99),
  	(6, 3, 304, 99.99),
  	(7, 4, 403, 120),
  	(8, 4, 404, 120),
  	(9, 5, 504, 170),
  	(10, 5, 505, 170);

INSERT INTO guests (id, last_name, first_name, phone_number, email, address)
	VALUES
    (1, 'Stark', 'Ned', '555-1730', 'ned@got.com', '100 Winterfell Rd'),
	  (2, 'Snow', 'Jon', '555-5555', 'jon.snow@got.com', '1 Wall Ave'),
  	(3, 'Stark', 'Arya', '555-0000', 'arya@got.com', '123 Nowhere St'),
	  (4, 'Targaryen', 'Daenerys', '555-0267', 'khaleesi@got.com', '3 Dragons Way');

INSERT INTO bookings (id, check_in, check_out, room_id, guest_id)
	VALUES
    (1, '2011-04-11', '2011-04-18', 5, 1),
    (2, '2012-12-01', '2012-12-04', 5, 2),
    (3, '2012-12-01', '2012-12-04', 7, 2),
    (4, '2013-01-01', '2013-01-03', 10, 4),
    (5, '2013-02-13', '2013-02-17', 10, 4)
    ;


- A guest who exists in the database and has not booked a room.

    SELECT guests.last_name, guests.first_name
    FROM guests
    LEFT JOIN bookings
    ON bookings.guest_id = guests.id
    WHERE bookings.check_in IS null;

| last_name | first_name |
| --------- | ---------- |
| Stark     | Arya       |


- Bookings for a guest who has booked two rooms for the same dates.

    SELECT guests.last_name, guests.first_name, B1.check_in, B1.check_out, B1.room_id
    FROM bookings B1
    INNER JOIN (
        SELECT check_in, check_out
        FROM bookings
        GROUP BY check_in, check_out
        HAVING COUNT(*) > 1
        ) B2
    ON B1.check_in = B2.check_in AND B1.check_out = B2.check_out
    JOIN guests
    ON guests.id = B1.guest_id;

| last_name | first_name | check_in   | check_out  | room_id |
| --------- | ---------- | ---------- | ---------- | ------- |
| Snow      | Jon        | 2012-12-01 | 2012-12-04 | 5       |
| Snow      | Jon        | 2012-12-01 | 2012-12-04 | 7       |


- Bookings for a guest who has booked one room several times on different dates.

    SELECT guests.last_name, guests.first_name, B1.check_in, B1.check_out, B1.room_id
    FROM bookings B1
    INNER JOIN (
        SELECT room_id, guest_id
        FROM bookings
        GROUP BY room_id, guest_id
        HAVING COUNT(*) > 1
        ) B2
    ON B1.room_id = B2.room_id AND B1.guest_id = B2.guest_id
    JOIN guests
    ON guests.id = B1.guest_id;

| last_name | first_name | check_in   | check_out  | room_id |
| --------- | ---------- | ---------- | ---------- | ------- |
| Targaryen | Daenerys   | 2013-01-01 | 2013-01-03 | 10      |
| Targaryen | Daenerys   | 2013-02-13 | 2013-02-17 | 10      |


- The number of unique guests who have booked the same room.

    SELECT COUNT (DISTINCT guest_id)
    FROM bookings
    WHERE room_id = 5;

| COUNT (DISTINCT guest_id) |
| ------------------------- |
| 2                         |
